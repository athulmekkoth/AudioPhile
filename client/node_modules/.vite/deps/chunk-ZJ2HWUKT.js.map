{
  "version": 3,
  "sources": ["../../immer/src/utils/errors.ts", "../../immer/src/utils/common.ts", "../../immer/src/utils/plugins.ts", "../../immer/src/core/scope.ts", "../../immer/src/core/finalize.ts", "../../immer/src/core/proxy.ts", "../../immer/src/core/immerClass.ts", "../../immer/src/core/current.ts", "../../immer/src/plugins/es5.ts", "../../immer/src/plugins/patches.ts", "../../immer/src/plugins/mapset.ts", "../../immer/src/plugins/all.ts", "../../immer/src/immer.ts", "../../immer/src/utils/env.ts"],
  "sourcesContent": ["const errors = {\n\t0: \"Illegal state\",\n\t1: \"Immer drafts cannot have computed properties\",\n\t2: \"This object has been frozen and should not be mutated\",\n\t3(data: any) {\n\t\treturn (\n\t\t\t\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" +\n\t\t\tdata\n\t\t)\n\t},\n\t4: \"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n\t5: \"Immer forbids circular references\",\n\t6: \"The first or second argument to `produce` must be a function\",\n\t7: \"The third argument to `produce` must be a function or undefined\",\n\t8: \"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n\t9: \"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n\t10: \"The given draft is already finalized\",\n\t11: \"Object.defineProperty() cannot be used on an Immer draft\",\n\t12: \"Object.setPrototypeOf() cannot be used on an Immer draft\",\n\t13: \"Immer only supports deleting array indices\",\n\t14: \"Immer only supports setting array indices and the 'length' property\",\n\t15(path: string) {\n\t\treturn \"Cannot apply patch, path doesn't resolve: \" + path\n\t},\n\t16: 'Sets cannot have \"replace\" patches.',\n\t17(op: string) {\n\t\treturn \"Unsupported patch operation: \" + op\n\t},\n\t18(plugin: string) {\n\t\treturn `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \\`enable${plugin}()\\` when initializing your application.`\n\t},\n\t20: \"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available\",\n\t21(thing: string) {\n\t\treturn `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`\n\t},\n\t22(thing: string) {\n\t\treturn `'current' expects a draft, got: ${thing}`\n\t},\n\t23(thing: string) {\n\t\treturn `'original' expects a draft, got: ${thing}`\n\t},\n\t24: \"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"\n} as const\n\nexport function die(error: keyof typeof errors, ...args: any[]): never {\n\tif (__DEV__) {\n\t\tconst e = errors[error]\n\t\tconst msg = !e\n\t\t\t? \"unknown error nr: \" + error\n\t\t\t: typeof e === \"function\"\n\t\t\t? e.apply(null, args as any)\n\t\t\t: e\n\t\tthrow new Error(`[Immer] ${msg}`)\n\t}\n\tthrow new Error(\n\t\t`[Immer] minified error nr: ${error}${\n\t\t\targs.length ? \" \" + args.map(s => `'${s}'`).join(\",\") : \"\"\n\t\t}. Find the full error at: https://bit.ly/3cXEKWf`\n\t)\n}\n", "import {\n\tDRAFT_STATE,\n\tDRAFTABLE,\n\thasSet,\n\tObjectish,\n\tDrafted,\n\tAnyObject,\n\tAnyMap,\n\tAnySet,\n\tImmerState,\n\thasMap,\n\tArchtype,\n\tdie\n} from \"../internal\"\n\n/** Returns true if the given value is an Immer draft */\n/*#__PURE__*/\nexport function isDraft(value: any): boolean {\n\treturn !!value && !!value[DRAFT_STATE]\n}\n\n/** Returns true if the given value can be drafted by Immer */\n/*#__PURE__*/\nexport function isDraftable(value: any): boolean {\n\tif (!value) return false\n\treturn (\n\t\tisPlainObject(value) ||\n\t\tArray.isArray(value) ||\n\t\t!!value[DRAFTABLE] ||\n\t\t!!value.constructor?.[DRAFTABLE] ||\n\t\tisMap(value) ||\n\t\tisSet(value)\n\t)\n}\n\nconst objectCtorString = Object.prototype.constructor.toString()\n/*#__PURE__*/\nexport function isPlainObject(value: any): boolean {\n\tif (!value || typeof value !== \"object\") return false\n\tconst proto = Object.getPrototypeOf(value)\n\tif (proto === null) {\n\t\treturn true\n\t}\n\tconst Ctor =\n\t\tObject.hasOwnProperty.call(proto, \"constructor\") && proto.constructor\n\n\tif (Ctor === Object) return true\n\n\treturn (\n\t\ttypeof Ctor == \"function\" &&\n\t\tFunction.toString.call(Ctor) === objectCtorString\n\t)\n}\n\n/** Get the underlying object that is represented by the given draft */\n/*#__PURE__*/\nexport function original<T>(value: T): T | undefined\nexport function original(value: Drafted<any>): any {\n\tif (!isDraft(value)) die(23, value)\n\treturn value[DRAFT_STATE].base_\n}\n\n/*#__PURE__*/\nexport const ownKeys: (target: AnyObject) => PropertyKey[] =\n\ttypeof Reflect !== \"undefined\" && Reflect.ownKeys\n\t\t? Reflect.ownKeys\n\t\t: typeof Object.getOwnPropertySymbols !== \"undefined\"\n\t\t? obj =>\n\t\t\t\tObject.getOwnPropertyNames(obj).concat(\n\t\t\t\t\tObject.getOwnPropertySymbols(obj) as any\n\t\t\t\t)\n\t\t: /* istanbul ignore next */ Object.getOwnPropertyNames\n\nexport const getOwnPropertyDescriptors =\n\tObject.getOwnPropertyDescriptors ||\n\tfunction getOwnPropertyDescriptors(target: any) {\n\t\t// Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274\n\t\tconst res: any = {}\n\t\townKeys(target).forEach(key => {\n\t\t\tres[key] = Object.getOwnPropertyDescriptor(target, key)\n\t\t})\n\t\treturn res\n\t}\n\nexport function each<T extends Objectish>(\n\tobj: T,\n\titer: (key: string | number, value: any, source: T) => void,\n\tenumerableOnly?: boolean\n): void\nexport function each(obj: any, iter: any, enumerableOnly = false) {\n\tif (getArchtype(obj) === Archtype.Object) {\n\t\t;(enumerableOnly ? Object.keys : ownKeys)(obj).forEach(key => {\n\t\t\tif (!enumerableOnly || typeof key !== \"symbol\") iter(key, obj[key], obj)\n\t\t})\n\t} else {\n\t\tobj.forEach((entry: any, index: any) => iter(index, entry, obj))\n\t}\n}\n\n/*#__PURE__*/\nexport function getArchtype(thing: any): Archtype {\n\t/* istanbul ignore next */\n\tconst state: undefined | ImmerState = thing[DRAFT_STATE]\n\treturn state\n\t\t? state.type_ > 3\n\t\t\t? state.type_ - 4 // cause Object and Array map back from 4 and 5\n\t\t\t: (state.type_ as any) // others are the same\n\t\t: Array.isArray(thing)\n\t\t? Archtype.Array\n\t\t: isMap(thing)\n\t\t? Archtype.Map\n\t\t: isSet(thing)\n\t\t? Archtype.Set\n\t\t: Archtype.Object\n}\n\n/*#__PURE__*/\nexport function has(thing: any, prop: PropertyKey): boolean {\n\treturn getArchtype(thing) === Archtype.Map\n\t\t? thing.has(prop)\n\t\t: Object.prototype.hasOwnProperty.call(thing, prop)\n}\n\n/*#__PURE__*/\nexport function get(thing: AnyMap | AnyObject, prop: PropertyKey): any {\n\t// @ts-ignore\n\treturn getArchtype(thing) === Archtype.Map ? thing.get(prop) : thing[prop]\n}\n\n/*#__PURE__*/\nexport function set(thing: any, propOrOldValue: PropertyKey, value: any) {\n\tconst t = getArchtype(thing)\n\tif (t === Archtype.Map) thing.set(propOrOldValue, value)\n\telse if (t === Archtype.Set) {\n\t\tthing.add(value)\n\t} else thing[propOrOldValue] = value\n}\n\n/*#__PURE__*/\nexport function is(x: any, y: any): boolean {\n\t// From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n\tif (x === y) {\n\t\treturn x !== 0 || 1 / x === 1 / y\n\t} else {\n\t\treturn x !== x && y !== y\n\t}\n}\n\n/*#__PURE__*/\nexport function isMap(target: any): target is AnyMap {\n\treturn hasMap && target instanceof Map\n}\n\n/*#__PURE__*/\nexport function isSet(target: any): target is AnySet {\n\treturn hasSet && target instanceof Set\n}\n/*#__PURE__*/\nexport function latest(state: ImmerState): any {\n\treturn state.copy_ || state.base_\n}\n\n/*#__PURE__*/\nexport function shallowCopy(base: any) {\n\tif (Array.isArray(base)) return Array.prototype.slice.call(base)\n\tconst descriptors = getOwnPropertyDescriptors(base)\n\tdelete descriptors[DRAFT_STATE as any]\n\tlet keys = ownKeys(descriptors)\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tconst key: any = keys[i]\n\t\tconst desc = descriptors[key]\n\t\tif (desc.writable === false) {\n\t\t\tdesc.writable = true\n\t\t\tdesc.configurable = true\n\t\t}\n\t\t// like object.assign, we will read any _own_, get/set accessors. This helps in dealing\n\t\t// with libraries that trap values, like mobx or vue\n\t\t// unlike object.assign, non-enumerables will be copied as well\n\t\tif (desc.get || desc.set)\n\t\t\tdescriptors[key] = {\n\t\t\t\tconfigurable: true,\n\t\t\t\twritable: true, // could live with !!desc.set as well here...\n\t\t\t\tenumerable: desc.enumerable,\n\t\t\t\tvalue: base[key]\n\t\t\t}\n\t}\n\treturn Object.create(Object.getPrototypeOf(base), descriptors)\n}\n\n/**\n * Freezes draftable objects. Returns the original object.\n * By default freezes shallowly, but if the second argument is `true` it will freeze recursively.\n *\n * @param obj\n * @param deep\n */\nexport function freeze<T>(obj: T, deep?: boolean): T\nexport function freeze<T>(obj: any, deep: boolean = false): T {\n\tif (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj\n\tif (getArchtype(obj) > 1 /* Map or Set */) {\n\t\tobj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections as any\n\t}\n\tObject.freeze(obj)\n\tif (deep) each(obj, (key, value) => freeze(value, true), true)\n\treturn obj\n}\n\nfunction dontMutateFrozenCollections() {\n\tdie(2)\n}\n\nexport function isFrozen(obj: any): boolean {\n\tif (obj == null || typeof obj !== \"object\") return true\n\t// See #600, IE dies on non-objects in Object.isFrozen\n\treturn Object.isFrozen(obj)\n}\n", "import {\n\tImmerState,\n\tPatch,\n\tImmerScope,\n\tDrafted,\n\tAnyObject,\n\tImmerBaseState,\n\tAnyMap,\n\tAnySet,\n\tProxyType,\n\tdie\n} from \"../internal\"\n\n/** Plugin utilities */\nconst plugins: {\n\tPatches?: {\n\t\tgeneratePatches_(\n\t\t\tstate: ImmerState,\n\t\t\tbasePath: PatchPath,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tgenerateReplacementPatches_(\n\t\t\tbase: any,\n\t\t\treplacement: any,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tapplyPatches_<T>(draft: T, patches: Patch[]): T\n\t}\n\tES5?: {\n\t\twillFinalizeES5_(scope: ImmerScope, result: any, isReplaced: boolean): void\n\t\tcreateES5Proxy_<T>(\n\t\t\tbase: T,\n\t\t\tparent?: ImmerState\n\t\t): Drafted<T, ES5ObjectState | ES5ArrayState>\n\t\thasChanges_(state: ES5ArrayState | ES5ObjectState): boolean\n\t}\n\tMapSet?: {\n\t\tproxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T\n\t\tproxySet_<T extends AnySet>(target: T, parent?: ImmerState): T\n\t}\n} = {}\n\ntype Plugins = typeof plugins\n\nexport function getPlugin<K extends keyof Plugins>(\n\tpluginKey: K\n): Exclude<Plugins[K], undefined> {\n\tconst plugin = plugins[pluginKey]\n\tif (!plugin) {\n\t\tdie(18, pluginKey)\n\t}\n\t// @ts-ignore\n\treturn plugin\n}\n\nexport function loadPlugin<K extends keyof Plugins>(\n\tpluginKey: K,\n\timplementation: Plugins[K]\n): void {\n\tif (!plugins[pluginKey]) plugins[pluginKey] = implementation\n}\n\n/** ES5 Plugin */\n\ninterface ES5BaseState extends ImmerBaseState {\n\tassigned_: {[key: string]: any}\n\tparent_?: ImmerState\n\trevoked_: boolean\n}\n\nexport interface ES5ObjectState extends ES5BaseState {\n\ttype_: ProxyType.ES5Object\n\tdraft_: Drafted<AnyObject, ES5ObjectState>\n\tbase_: AnyObject\n\tcopy_: AnyObject | null\n}\n\nexport interface ES5ArrayState extends ES5BaseState {\n\ttype_: ProxyType.ES5Array\n\tdraft_: Drafted<AnyObject, ES5ArrayState>\n\tbase_: any\n\tcopy_: any\n}\n\n/** Map / Set plugin */\n\nexport interface MapState extends ImmerBaseState {\n\ttype_: ProxyType.Map\n\tcopy_: AnyMap | undefined\n\tassigned_: Map<any, boolean> | undefined\n\tbase_: AnyMap\n\trevoked_: boolean\n\tdraft_: Drafted<AnyMap, MapState>\n}\n\nexport interface SetState extends ImmerBaseState {\n\ttype_: ProxyType.Set\n\tcopy_: AnySet | undefined\n\tbase_: AnySet\n\tdrafts_: Map<any, Drafted> // maps the original value to the draft value in the new set\n\trevoked_: boolean\n\tdraft_: Drafted<AnySet, SetState>\n}\n\n/** Patches plugin */\n\nexport type PatchPath = (string | number)[]\n", "import {\n\tPatch,\n\tPatchListener,\n\tDrafted,\n\tImmer,\n\tDRAFT_STATE,\n\tImmerState,\n\tProxyType,\n\tgetPlugin\n} from \"../internal\"\nimport {die} from \"../utils/errors\"\n\n/** Each scope represents a `produce` call. */\n\nexport interface ImmerScope {\n\tpatches_?: Patch[]\n\tinversePatches_?: Patch[]\n\tcanAutoFreeze_: boolean\n\tdrafts_: any[]\n\tparent_?: ImmerScope\n\tpatchListener_?: PatchListener\n\timmer_: Immer\n\tunfinalizedDrafts_: number\n}\n\nlet currentScope: ImmerScope | undefined\n\nexport function getCurrentScope() {\n\tif (__DEV__ && !currentScope) die(0)\n\treturn currentScope!\n}\n\nfunction createScope(\n\tparent_: ImmerScope | undefined,\n\timmer_: Immer\n): ImmerScope {\n\treturn {\n\t\tdrafts_: [],\n\t\tparent_,\n\t\timmer_,\n\t\t// Whenever the modified draft contains a draft from another scope, we\n\t\t// need to prevent auto-freezing so the unowned draft can be finalized.\n\t\tcanAutoFreeze_: true,\n\t\tunfinalizedDrafts_: 0\n\t}\n}\n\nexport function usePatchesInScope(\n\tscope: ImmerScope,\n\tpatchListener?: PatchListener\n) {\n\tif (patchListener) {\n\t\tgetPlugin(\"Patches\") // assert we have the plugin\n\t\tscope.patches_ = []\n\t\tscope.inversePatches_ = []\n\t\tscope.patchListener_ = patchListener\n\t}\n}\n\nexport function revokeScope(scope: ImmerScope) {\n\tleaveScope(scope)\n\tscope.drafts_.forEach(revokeDraft)\n\t// @ts-ignore\n\tscope.drafts_ = null\n}\n\nexport function leaveScope(scope: ImmerScope) {\n\tif (scope === currentScope) {\n\t\tcurrentScope = scope.parent_\n\t}\n}\n\nexport function enterScope(immer: Immer) {\n\treturn (currentScope = createScope(currentScope, immer))\n}\n\nfunction revokeDraft(draft: Drafted) {\n\tconst state: ImmerState = draft[DRAFT_STATE]\n\tif (\n\t\tstate.type_ === ProxyType.ProxyObject ||\n\t\tstate.type_ === ProxyType.ProxyArray\n\t)\n\t\tstate.revoke_()\n\telse state.revoked_ = true\n}\n", "import {\n\tImmerScope,\n\tDRAFT_STATE,\n\tisDraftable,\n\tNOTHING,\n\tPatchPath,\n\teach,\n\thas,\n\tfreeze,\n\tImmerState,\n\tisDraft,\n\tSetState,\n\tset,\n\tProxyType,\n\tgetPlugin,\n\tdie,\n\trevokeScope,\n\tisFrozen,\n\tshallowCopy\n} from \"../internal\"\n\nexport function processResult(result: any, scope: ImmerScope) {\n\tscope.unfinalizedDrafts_ = scope.drafts_.length\n\tconst baseDraft = scope.drafts_![0]\n\tconst isReplaced = result !== undefined && result !== baseDraft\n\tif (!scope.immer_.useProxies_)\n\t\tgetPlugin(\"ES5\").willFinalizeES5_(scope, result, isReplaced)\n\tif (isReplaced) {\n\t\tif (baseDraft[DRAFT_STATE].modified_) {\n\t\t\trevokeScope(scope)\n\t\t\tdie(4)\n\t\t}\n\t\tif (isDraftable(result)) {\n\t\t\t// Finalize the result in case it contains (or is) a subset of the draft.\n\t\t\tresult = finalize(scope, result)\n\t\t\tif (!scope.parent_) maybeFreeze(scope, result)\n\t\t}\n\t\tif (scope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(\n\t\t\t\tbaseDraft[DRAFT_STATE].base_,\n\t\t\t\tresult,\n\t\t\t\tscope.patches_,\n\t\t\t\tscope.inversePatches_!\n\t\t\t)\n\t\t}\n\t} else {\n\t\t// Finalize the base draft.\n\t\tresult = finalize(scope, baseDraft, [])\n\t}\n\trevokeScope(scope)\n\tif (scope.patches_) {\n\t\tscope.patchListener_!(scope.patches_, scope.inversePatches_!)\n\t}\n\treturn result !== NOTHING ? result : undefined\n}\n\nfunction finalize(rootScope: ImmerScope, value: any, path?: PatchPath) {\n\t// Don't recurse in tho recursive data structures\n\tif (isFrozen(value)) return value\n\n\tconst state: ImmerState = value[DRAFT_STATE]\n\t// A plain object, might need freezing, might contain drafts\n\tif (!state) {\n\t\teach(\n\t\t\tvalue,\n\t\t\t(key, childValue) =>\n\t\t\t\tfinalizeProperty(rootScope, state, value, key, childValue, path),\n\t\t\ttrue // See #590, don't recurse into non-enumerable of non drafted objects\n\t\t)\n\t\treturn value\n\t}\n\t// Never finalize drafts owned by another scope.\n\tif (state.scope_ !== rootScope) return value\n\t// Unmodified draft, return the (frozen) original\n\tif (!state.modified_) {\n\t\tmaybeFreeze(rootScope, state.base_, true)\n\t\treturn state.base_\n\t}\n\t// Not finalized yet, let's do that now\n\tif (!state.finalized_) {\n\t\tstate.finalized_ = true\n\t\tstate.scope_.unfinalizedDrafts_--\n\t\tconst result =\n\t\t\t// For ES5, create a good copy from the draft first, with added keys and without deleted keys.\n\t\t\tstate.type_ === ProxyType.ES5Object || state.type_ === ProxyType.ES5Array\n\t\t\t\t? (state.copy_ = shallowCopy(state.draft_))\n\t\t\t\t: state.copy_\n\t\t// Finalize all children of the copy\n\t\t// For sets we clone before iterating, otherwise we can get in endless loop due to modifying during iteration, see #628\n\t\t// To preserve insertion order in all cases we then clear the set\n\t\t// And we let finalizeProperty know it needs to re-add non-draft children back to the target\n\t\tlet resultEach = result\n\t\tlet isSet = false\n\t\tif (state.type_ === ProxyType.Set) {\n\t\t\tresultEach = new Set(result)\n\t\t\tresult.clear()\n\t\t\tisSet = true\n\t\t}\n\t\teach(resultEach, (key, childValue) =>\n\t\t\tfinalizeProperty(rootScope, state, result, key, childValue, path, isSet)\n\t\t)\n\t\t// everything inside is frozen, we can freeze here\n\t\tmaybeFreeze(rootScope, result, false)\n\t\t// first time finalizing, let's create those patches\n\t\tif (path && rootScope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generatePatches_(\n\t\t\t\tstate,\n\t\t\t\tpath,\n\t\t\t\trootScope.patches_,\n\t\t\t\trootScope.inversePatches_!\n\t\t\t)\n\t\t}\n\t}\n\treturn state.copy_\n}\n\nfunction finalizeProperty(\n\trootScope: ImmerScope,\n\tparentState: undefined | ImmerState,\n\ttargetObject: any,\n\tprop: string | number,\n\tchildValue: any,\n\trootPath?: PatchPath,\n\ttargetIsSet?: boolean\n) {\n\tif (__DEV__ && childValue === targetObject) die(5)\n\tif (isDraft(childValue)) {\n\t\tconst path =\n\t\t\trootPath &&\n\t\t\tparentState &&\n\t\t\tparentState!.type_ !== ProxyType.Set && // Set objects are atomic since they have no keys.\n\t\t\t!has((parentState as Exclude<ImmerState, SetState>).assigned_!, prop) // Skip deep patches for assigned keys.\n\t\t\t\t? rootPath!.concat(prop)\n\t\t\t\t: undefined\n\t\t// Drafts owned by `scope` are finalized here.\n\t\tconst res = finalize(rootScope, childValue, path)\n\t\tset(targetObject, prop, res)\n\t\t// Drafts from another scope must prevented to be frozen\n\t\t// if we got a draft back from finalize, we're in a nested produce and shouldn't freeze\n\t\tif (isDraft(res)) {\n\t\t\trootScope.canAutoFreeze_ = false\n\t\t} else return\n\t} else if (targetIsSet) {\n\t\ttargetObject.add(childValue)\n\t}\n\t// Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\tif (isDraftable(childValue) && !isFrozen(childValue)) {\n\t\tif (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n\t\t\t// optimization: if an object is not a draft, and we don't have to\n\t\t\t// deepfreeze everything, and we are sure that no drafts are left in the remaining object\n\t\t\t// cause we saw and finalized all drafts already; we can stop visiting the rest of the tree.\n\t\t\t// This benefits especially adding large data tree's without further processing.\n\t\t\t// See add-data.js perf test\n\t\t\treturn\n\t\t}\n\t\tfinalize(rootScope, childValue)\n\t\t// immer deep freezes plain objects, so if there is no parent state, we freeze as well\n\t\tif (!parentState || !parentState.scope_.parent_)\n\t\t\tmaybeFreeze(rootScope, childValue)\n\t}\n}\n\nfunction maybeFreeze(scope: ImmerScope, value: any, deep = false) {\n\t// we never freeze for a non-root scope; as it would prevent pruning for drafts inside wrapping objects\n\tif (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n\t\tfreeze(value, deep)\n\t}\n}\n", "import {\n\teach,\n\thas,\n\tis,\n\tisDraftable,\n\tshallowCopy,\n\tlatest,\n\tImmerBaseState,\n\tImmerState,\n\tDrafted,\n\tAnyObject,\n\tAnyArray,\n\tObjectish,\n\tgetCurrentScope,\n\tDRAFT_STATE,\n\tdie,\n\tcreateProxy,\n\tProxyType\n} from \"../internal\"\n\ninterface ProxyBaseState extends ImmerBaseState {\n\tassigned_: {\n\t\t[property: string]: boolean\n\t}\n\tparent_?: ImmerState\n\trevoke_(): void\n}\n\nexport interface ProxyObjectState extends ProxyBaseState {\n\ttype_: ProxyType.ProxyObject\n\tbase_: any\n\tcopy_: any\n\tdraft_: Drafted<AnyObject, ProxyObjectState>\n}\n\nexport interface ProxyArrayState extends ProxyBaseState {\n\ttype_: ProxyType.ProxyArray\n\tbase_: AnyArray\n\tcopy_: AnyArray | null\n\tdraft_: Drafted<AnyArray, ProxyArrayState>\n}\n\ntype ProxyState = ProxyObjectState | ProxyArrayState\n\n/**\n * Returns a new draft of the `base` object.\n *\n * The second argument is the parent draft-state (used internally).\n */\nexport function createProxyProxy<T extends Objectish>(\n\tbase: T,\n\tparent?: ImmerState\n): Drafted<T, ProxyState> {\n\tconst isArray = Array.isArray(base)\n\tconst state: ProxyState = {\n\t\ttype_: isArray ? ProxyType.ProxyArray : (ProxyType.ProxyObject as any),\n\t\t// Track which produce call this is associated with.\n\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t// True for both shallow and deep changes.\n\t\tmodified_: false,\n\t\t// Used during finalization.\n\t\tfinalized_: false,\n\t\t// Track which properties have been assigned (true) or deleted (false).\n\t\tassigned_: {},\n\t\t// The parent draft state.\n\t\tparent_: parent,\n\t\t// The base state.\n\t\tbase_: base,\n\t\t// The base proxy.\n\t\tdraft_: null as any, // set below\n\t\t// The base copy with any updated values.\n\t\tcopy_: null,\n\t\t// Called by the `produce` function.\n\t\trevoke_: null as any,\n\t\tisManual_: false\n\t}\n\n\t// the traps must target something, a bit like the 'real' base.\n\t// but also, we need to be able to determine from the target what the relevant state is\n\t// (to avoid creating traps per instance to capture the state in closure,\n\t// and to avoid creating weird hidden properties as well)\n\t// So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n\t// Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\tlet target: T = state as any\n\tlet traps: ProxyHandler<object | Array<any>> = objectTraps\n\tif (isArray) {\n\t\ttarget = [state] as any\n\t\ttraps = arrayTraps\n\t}\n\n\tconst {revoke, proxy} = Proxy.revocable(target, traps)\n\tstate.draft_ = proxy as any\n\tstate.revoke_ = revoke\n\treturn proxy as any\n}\n\n/**\n * Object drafts\n */\nexport const objectTraps: ProxyHandler<ProxyState> = {\n\tget(state, prop) {\n\t\tif (prop === DRAFT_STATE) return state\n\n\t\tconst source = latest(state)\n\t\tif (!has(source, prop)) {\n\t\t\t// non-existing or non-own property...\n\t\t\treturn readPropFromProto(state, source, prop)\n\t\t}\n\t\tconst value = source[prop]\n\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\treturn value\n\t\t}\n\t\t// Check for existing draft in modified state.\n\t\t// Assigned values are never drafted. This catches any drafts we created, too.\n\t\tif (value === peek(state.base_, prop)) {\n\t\t\tprepareCopy(state)\n\t\t\treturn (state.copy_![prop as any] = createProxy(\n\t\t\t\tstate.scope_.immer_,\n\t\t\t\tvalue,\n\t\t\t\tstate\n\t\t\t))\n\t\t}\n\t\treturn value\n\t},\n\thas(state, prop) {\n\t\treturn prop in latest(state)\n\t},\n\townKeys(state) {\n\t\treturn Reflect.ownKeys(latest(state))\n\t},\n\tset(\n\t\tstate: ProxyObjectState,\n\t\tprop: string /* strictly not, but helps TS */,\n\t\tvalue\n\t) {\n\t\tconst desc = getDescriptorFromProto(latest(state), prop)\n\t\tif (desc?.set) {\n\t\t\t// special case: if this write is captured by a setter, we have\n\t\t\t// to trigger it with the correct context\n\t\t\tdesc.set.call(state.draft_, value)\n\t\t\treturn true\n\t\t}\n\t\tif (!state.modified_) {\n\t\t\t// the last check is because we need to be able to distinguish setting a non-existing to undefined (which is a change)\n\t\t\t// from setting an existing property with value undefined to undefined (which is not a change)\n\t\t\tconst current = peek(latest(state), prop)\n\t\t\t// special case, if we assigning the original value to a draft, we can ignore the assignment\n\t\t\tconst currentState: ProxyObjectState = current?.[DRAFT_STATE]\n\t\t\tif (currentState && currentState.base_ === value) {\n\t\t\t\tstate.copy_![prop] = value\n\t\t\t\tstate.assigned_[prop] = false\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tif (is(value, current) && (value !== undefined || has(state.base_, prop)))\n\t\t\t\treturn true\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t}\n\n\t\tif (\n\t\t\t(state.copy_![prop] === value &&\n\t\t\t\t// special case: handle new props with value 'undefined'\n\t\t\t\t(value !== undefined || prop in state.copy_)) ||\n\t\t\t// special case: NaN\n\t\t\t(Number.isNaN(value) && Number.isNaN(state.copy_![prop]))\n\t\t)\n\t\t\treturn true\n\n\t\t// @ts-ignore\n\t\tstate.copy_![prop] = value\n\t\tstate.assigned_[prop] = true\n\t\treturn true\n\t},\n\tdeleteProperty(state, prop: string) {\n\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\tif (peek(state.base_, prop) !== undefined || prop in state.base_) {\n\t\t\tstate.assigned_[prop] = false\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t} else {\n\t\t\t// if an originally not assigned property was deleted\n\t\t\tdelete state.assigned_[prop]\n\t\t}\n\t\t// @ts-ignore\n\t\tif (state.copy_) delete state.copy_[prop]\n\t\treturn true\n\t},\n\t// Note: We never coerce `desc.value` into an Immer draft, because we can't make\n\t// the same guarantee in ES5 mode.\n\tgetOwnPropertyDescriptor(state, prop) {\n\t\tconst owner = latest(state)\n\t\tconst desc = Reflect.getOwnPropertyDescriptor(owner, prop)\n\t\tif (!desc) return desc\n\t\treturn {\n\t\t\twritable: true,\n\t\t\tconfigurable: state.type_ !== ProxyType.ProxyArray || prop !== \"length\",\n\t\t\tenumerable: desc.enumerable,\n\t\t\tvalue: owner[prop]\n\t\t}\n\t},\n\tdefineProperty() {\n\t\tdie(11)\n\t},\n\tgetPrototypeOf(state) {\n\t\treturn Object.getPrototypeOf(state.base_)\n\t},\n\tsetPrototypeOf() {\n\t\tdie(12)\n\t}\n}\n\n/**\n * Array drafts\n */\n\nconst arrayTraps: ProxyHandler<[ProxyArrayState]> = {}\neach(objectTraps, (key, fn) => {\n\t// @ts-ignore\n\tarrayTraps[key] = function() {\n\t\targuments[0] = arguments[0][0]\n\t\treturn fn.apply(this, arguments)\n\t}\n})\narrayTraps.deleteProperty = function(state, prop) {\n\tif (__DEV__ && isNaN(parseInt(prop as any))) die(13)\n\t// @ts-ignore\n\treturn arrayTraps.set!.call(this, state, prop, undefined)\n}\narrayTraps.set = function(state, prop, value) {\n\tif (__DEV__ && prop !== \"length\" && isNaN(parseInt(prop as any))) die(14)\n\treturn objectTraps.set!.call(this, state[0], prop, value, state[0])\n}\n\n// Access a property without creating an Immer draft.\nfunction peek(draft: Drafted, prop: PropertyKey) {\n\tconst state = draft[DRAFT_STATE]\n\tconst source = state ? latest(state) : draft\n\treturn source[prop]\n}\n\nfunction readPropFromProto(state: ImmerState, source: any, prop: PropertyKey) {\n\tconst desc = getDescriptorFromProto(source, prop)\n\treturn desc\n\t\t? `value` in desc\n\t\t\t? desc.value\n\t\t\t: // This is a very special case, if the prop is a getter defined by the\n\t\t\t  // prototype, we should invoke it with the draft as context!\n\t\t\t  desc.get?.call(state.draft_)\n\t\t: undefined\n}\n\nfunction getDescriptorFromProto(\n\tsource: any,\n\tprop: PropertyKey\n): PropertyDescriptor | undefined {\n\t// 'in' checks proto!\n\tif (!(prop in source)) return undefined\n\tlet proto = Object.getPrototypeOf(source)\n\twhile (proto) {\n\t\tconst desc = Object.getOwnPropertyDescriptor(proto, prop)\n\t\tif (desc) return desc\n\t\tproto = Object.getPrototypeOf(proto)\n\t}\n\treturn undefined\n}\n\nexport function markChanged(state: ImmerState) {\n\tif (!state.modified_) {\n\t\tstate.modified_ = true\n\t\tif (state.parent_) {\n\t\t\tmarkChanged(state.parent_)\n\t\t}\n\t}\n}\n\nexport function prepareCopy(state: {base_: any; copy_: any}) {\n\tif (!state.copy_) {\n\t\tstate.copy_ = shallowCopy(state.base_)\n\t}\n}\n", "import {\n\tIProduceWithPatches,\n\tIProduce,\n\tImmerState,\n\tDrafted,\n\tisDraftable,\n\tprocessResult,\n\tPatch,\n\tObjectish,\n\tDRAFT_STATE,\n\tDraft,\n\tPatchListener,\n\tisDraft,\n\tisMap,\n\tisSet,\n\tcreateProxyProxy,\n\tgetPlugin,\n\tdie,\n\thasProxies,\n\tenterScope,\n\trevokeScope,\n\tleaveScope,\n\tusePatchesInScope,\n\tgetCurrentScope,\n\tNOTHING,\n\tfreeze,\n\tcurrent\n} from \"../internal\"\n\ninterface ProducersFns {\n\tproduce: IProduce\n\tproduceWithPatches: IProduceWithPatches\n}\n\nexport class Immer implements ProducersFns {\n\tuseProxies_: boolean = hasProxies\n\n\tautoFreeze_: boolean = true\n\n\tconstructor(config?: {useProxies?: boolean; autoFreeze?: boolean}) {\n\t\tif (typeof config?.useProxies === \"boolean\")\n\t\t\tthis.setUseProxies(config!.useProxies)\n\t\tif (typeof config?.autoFreeze === \"boolean\")\n\t\t\tthis.setAutoFreeze(config!.autoFreeze)\n\t}\n\n\t/**\n\t * The `produce` function takes a value and a \"recipe function\" (whose\n\t * return value often depends on the base state). The recipe function is\n\t * free to mutate its first argument however it wants. All mutations are\n\t * only ever applied to a __copy__ of the base state.\n\t *\n\t * Pass only a function to create a \"curried producer\" which relieves you\n\t * from passing the recipe function every time.\n\t *\n\t * Only plain objects and arrays are made mutable. All other objects are\n\t * considered uncopyable.\n\t *\n\t * Note: This function is __bound__ to its `Immer` instance.\n\t *\n\t * @param {any} base - the initial state\n\t * @param {Function} recipe - function that receives a proxy of the base state as first argument and which can be freely modified\n\t * @param {Function} patchListener - optional function that will be called with all the patches produced here\n\t * @returns {any} a new state, or the initial state if nothing was modified\n\t */\n\tproduce: IProduce = (base: any, recipe?: any, patchListener?: any) => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\" && typeof recipe !== \"function\") {\n\t\t\tconst defaultBase = recipe\n\t\t\trecipe = base\n\n\t\t\tconst self = this\n\t\t\treturn function curriedProduce(\n\t\t\t\tthis: any,\n\t\t\t\tbase = defaultBase,\n\t\t\t\t...args: any[]\n\t\t\t) {\n\t\t\t\treturn self.produce(base, (draft: Drafted) => recipe.call(this, draft, ...args)) // prettier-ignore\n\t\t\t}\n\t\t}\n\n\t\tif (typeof recipe !== \"function\") die(6)\n\t\tif (patchListener !== undefined && typeof patchListener !== \"function\")\n\t\t\tdie(7)\n\n\t\tlet result\n\n\t\t// Only plain objects, arrays, and \"immerable classes\" are drafted.\n\t\tif (isDraftable(base)) {\n\t\t\tconst scope = enterScope(this)\n\t\t\tconst proxy = createProxy(this, base, undefined)\n\t\t\tlet hasError = true\n\t\t\ttry {\n\t\t\t\tresult = recipe(proxy)\n\t\t\t\thasError = false\n\t\t\t} finally {\n\t\t\t\t// finally instead of catch + rethrow better preserves original stack\n\t\t\t\tif (hasError) revokeScope(scope)\n\t\t\t\telse leaveScope(scope)\n\t\t\t}\n\t\t\tif (typeof Promise !== \"undefined\" && result instanceof Promise) {\n\t\t\t\treturn result.then(\n\t\t\t\t\tresult => {\n\t\t\t\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\t\t\t\treturn processResult(result, scope)\n\t\t\t\t\t},\n\t\t\t\t\terror => {\n\t\t\t\t\t\trevokeScope(scope)\n\t\t\t\t\t\tthrow error\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\treturn processResult(result, scope)\n\t\t} else if (!base || typeof base !== \"object\") {\n\t\t\tresult = recipe(base)\n\t\t\tif (result === undefined) result = base\n\t\t\tif (result === NOTHING) result = undefined\n\t\t\tif (this.autoFreeze_) freeze(result, true)\n\t\t\tif (patchListener) {\n\t\t\t\tconst p: Patch[] = []\n\t\t\t\tconst ip: Patch[] = []\n\t\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(base, result, p, ip)\n\t\t\t\tpatchListener(p, ip)\n\t\t\t}\n\t\t\treturn result\n\t\t} else die(21, base)\n\t}\n\n\tproduceWithPatches: IProduceWithPatches = (base: any, recipe?: any): any => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\") {\n\t\t\treturn (state: any, ...args: any[]) =>\n\t\t\t\tthis.produceWithPatches(state, (draft: any) => base(draft, ...args))\n\t\t}\n\n\t\tlet patches: Patch[], inversePatches: Patch[]\n\t\tconst result = this.produce(base, recipe, (p: Patch[], ip: Patch[]) => {\n\t\t\tpatches = p\n\t\t\tinversePatches = ip\n\t\t})\n\n\t\tif (typeof Promise !== \"undefined\" && result instanceof Promise) {\n\t\t\treturn result.then(nextState => [nextState, patches!, inversePatches!])\n\t\t}\n\t\treturn [result, patches!, inversePatches!]\n\t}\n\n\tcreateDraft<T extends Objectish>(base: T): Draft<T> {\n\t\tif (!isDraftable(base)) die(8)\n\t\tif (isDraft(base)) base = current(base)\n\t\tconst scope = enterScope(this)\n\t\tconst proxy = createProxy(this, base, undefined)\n\t\tproxy[DRAFT_STATE].isManual_ = true\n\t\tleaveScope(scope)\n\t\treturn proxy as any\n\t}\n\n\tfinishDraft<D extends Draft<any>>(\n\t\tdraft: D,\n\t\tpatchListener?: PatchListener\n\t): D extends Draft<infer T> ? T : never {\n\t\tconst state: ImmerState = draft && (draft as any)[DRAFT_STATE]\n\t\tif (__DEV__) {\n\t\t\tif (!state || !state.isManual_) die(9)\n\t\t\tif (state.finalized_) die(10)\n\t\t}\n\t\tconst {scope_: scope} = state\n\t\tusePatchesInScope(scope, patchListener)\n\t\treturn processResult(undefined, scope)\n\t}\n\n\t/**\n\t * Pass true to automatically freeze all copies created by Immer.\n\t *\n\t * By default, auto-freezing is enabled.\n\t */\n\tsetAutoFreeze(value: boolean) {\n\t\tthis.autoFreeze_ = value\n\t}\n\n\t/**\n\t * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n\t * always faster than using ES5 proxies.\n\t *\n\t * By default, feature detection is used, so calling this is rarely necessary.\n\t */\n\tsetUseProxies(value: boolean) {\n\t\tif (value && !hasProxies) {\n\t\t\tdie(20)\n\t\t}\n\t\tthis.useProxies_ = value\n\t}\n\n\tapplyPatches<T extends Objectish>(base: T, patches: Patch[]): T {\n\t\t// If a patch replaces the entire state, take that replacement as base\n\t\t// before applying patches\n\t\tlet i: number\n\t\tfor (i = patches.length - 1; i >= 0; i--) {\n\t\t\tconst patch = patches[i]\n\t\t\tif (patch.path.length === 0 && patch.op === \"replace\") {\n\t\t\t\tbase = patch.value\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t// If there was a patch that replaced the entire state, start from the\n\t\t// patch after that.\n\t\tif (i > -1) {\n\t\t\tpatches = patches.slice(i + 1)\n\t\t}\n\n\t\tconst applyPatchesImpl = getPlugin(\"Patches\").applyPatches_\n\t\tif (isDraft(base)) {\n\t\t\t// N.B: never hits if some patch a replacement, patches are never drafts\n\t\t\treturn applyPatchesImpl(base, patches)\n\t\t}\n\t\t// Otherwise, produce a copy of the base state.\n\t\treturn this.produce(base, (draft: Drafted) =>\n\t\t\tapplyPatchesImpl(draft, patches)\n\t\t)\n\t}\n}\n\nexport function createProxy<T extends Objectish>(\n\timmer: Immer,\n\tvalue: T,\n\tparent?: ImmerState\n): Drafted<T, ImmerState> {\n\t// precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n\tconst draft: Drafted = isMap(value)\n\t\t? getPlugin(\"MapSet\").proxyMap_(value, parent)\n\t\t: isSet(value)\n\t\t? getPlugin(\"MapSet\").proxySet_(value, parent)\n\t\t: immer.useProxies_\n\t\t? createProxyProxy(value, parent)\n\t\t: getPlugin(\"ES5\").createES5Proxy_(value, parent)\n\n\tconst scope = parent ? parent.scope_ : getCurrentScope()\n\tscope.drafts_.push(draft)\n\treturn draft\n}\n", "import {\n\tdie,\n\tisDraft,\n\tshallowCopy,\n\teach,\n\tDRAFT_STATE,\n\tget,\n\tset,\n\tImmerState,\n\tisDraftable,\n\tArchtype,\n\tgetArchtype,\n\tgetPlugin\n} from \"../internal\"\n\n/** Takes a snapshot of the current state of a draft and finalizes it (but without freezing). This is a great utility to print the current state during debugging (no Proxies in the way). The output of current can also be safely leaked outside the producer. */\nexport function current<T>(value: T): T\nexport function current(value: any): any {\n\tif (!isDraft(value)) die(22, value)\n\treturn currentImpl(value)\n}\n\nfunction currentImpl(value: any): any {\n\tif (!isDraftable(value)) return value\n\tconst state: ImmerState | undefined = value[DRAFT_STATE]\n\tlet copy: any\n\tconst archType = getArchtype(value)\n\tif (state) {\n\t\tif (\n\t\t\t!state.modified_ &&\n\t\t\t(state.type_ < 4 || !getPlugin(\"ES5\").hasChanges_(state as any))\n\t\t)\n\t\t\treturn state.base_\n\t\t// Optimization: avoid generating new drafts during copying\n\t\tstate.finalized_ = true\n\t\tcopy = copyHelper(value, archType)\n\t\tstate.finalized_ = false\n\t} else {\n\t\tcopy = copyHelper(value, archType)\n\t}\n\n\teach(copy, (key, childValue) => {\n\t\tif (state && get(state.base_, key) === childValue) return // no need to copy or search in something that didn't change\n\t\tset(copy, key, currentImpl(childValue))\n\t})\n\t// In the future, we might consider freezing here, based on the current settings\n\treturn archType === Archtype.Set ? new Set(copy) : copy\n}\n\nfunction copyHelper(value: any, archType: number): any {\n\t// creates a shallow copy, even if it is a map or set\n\tswitch (archType) {\n\t\tcase Archtype.Map:\n\t\t\treturn new Map(value)\n\t\tcase Archtype.Set:\n\t\t\t// Set will be cloned as array temporarily, so that we can replace individual items\n\t\t\treturn Array.from(value)\n\t}\n\treturn shallowCopy(value)\n}\n", "import {\n\tImmerState,\n\tDrafted,\n\tES5ArrayState,\n\tES5ObjectState,\n\teach,\n\thas,\n\tisDraft,\n\tlatest,\n\tDRAFT_STATE,\n\tis,\n\tloadPlugin,\n\tImmerScope,\n\tProxyType,\n\tgetCurrentScope,\n\tdie,\n\tmarkChanged,\n\tobjectTraps,\n\townKeys,\n\tgetOwnPropertyDescriptors\n} from \"../internal\"\n\ntype ES5State = ES5ArrayState | ES5ObjectState\n\nexport function enableES5() {\n\tfunction willFinalizeES5_(\n\t\tscope: ImmerScope,\n\t\tresult: any,\n\t\tisReplaced: boolean\n\t) {\n\t\tif (!isReplaced) {\n\t\t\tif (scope.patches_) {\n\t\t\t\tmarkChangesRecursively(scope.drafts_![0])\n\t\t\t}\n\t\t\t// This is faster when we don't care about which attributes changed.\n\t\t\tmarkChangesSweep(scope.drafts_)\n\t\t}\n\t\t// When a child draft is returned, look for changes.\n\t\telse if (\n\t\t\tisDraft(result) &&\n\t\t\t(result[DRAFT_STATE] as ES5State).scope_ === scope\n\t\t) {\n\t\t\tmarkChangesSweep(scope.drafts_)\n\t\t}\n\t}\n\n\tfunction createES5Draft(isArray: boolean, base: any) {\n\t\tif (isArray) {\n\t\t\tconst draft = new Array(base.length)\n\t\t\tfor (let i = 0; i < base.length; i++)\n\t\t\t\tObject.defineProperty(draft, \"\" + i, proxyProperty(i, true))\n\t\t\treturn draft\n\t\t} else {\n\t\t\tconst descriptors = getOwnPropertyDescriptors(base)\n\t\t\tdelete descriptors[DRAFT_STATE as any]\n\t\t\tconst keys = ownKeys(descriptors)\n\t\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\t\tconst key: any = keys[i]\n\t\t\t\tdescriptors[key] = proxyProperty(\n\t\t\t\t\tkey,\n\t\t\t\t\tisArray || !!descriptors[key].enumerable\n\t\t\t\t)\n\t\t\t}\n\t\t\treturn Object.create(Object.getPrototypeOf(base), descriptors)\n\t\t}\n\t}\n\n\tfunction createES5Proxy_<T>(\n\t\tbase: T,\n\t\tparent?: ImmerState\n\t): Drafted<T, ES5ObjectState | ES5ArrayState> {\n\t\tconst isArray = Array.isArray(base)\n\t\tconst draft = createES5Draft(isArray, base)\n\n\t\tconst state: ES5ObjectState | ES5ArrayState = {\n\t\t\ttype_: isArray ? ProxyType.ES5Array : (ProxyType.ES5Object as any),\n\t\t\tscope_: parent ? parent.scope_ : getCurrentScope(),\n\t\t\tmodified_: false,\n\t\t\tfinalized_: false,\n\t\t\tassigned_: {},\n\t\t\tparent_: parent,\n\t\t\t// base is the object we are drafting\n\t\t\tbase_: base,\n\t\t\t// draft is the draft object itself, that traps all reads and reads from either the base (if unmodified) or copy (if modified)\n\t\t\tdraft_: draft,\n\t\t\tcopy_: null,\n\t\t\trevoked_: false,\n\t\t\tisManual_: false\n\t\t}\n\n\t\tObject.defineProperty(draft, DRAFT_STATE, {\n\t\t\tvalue: state,\n\t\t\t// enumerable: false <- the default\n\t\t\twritable: true\n\t\t})\n\t\treturn draft\n\t}\n\n\t// property descriptors are recycled to make sure we don't create a get and set closure per property,\n\t// but share them all instead\n\tconst descriptors: {[prop: string]: PropertyDescriptor} = {}\n\n\tfunction proxyProperty(\n\t\tprop: string | number,\n\t\tenumerable: boolean\n\t): PropertyDescriptor {\n\t\tlet desc = descriptors[prop]\n\t\tif (desc) {\n\t\t\tdesc.enumerable = enumerable\n\t\t} else {\n\t\t\tdescriptors[prop] = desc = {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable,\n\t\t\t\tget(this: any) {\n\t\t\t\t\tconst state = this[DRAFT_STATE]\n\t\t\t\t\tif (__DEV__) assertUnrevoked(state)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\treturn objectTraps.get(state, prop)\n\t\t\t\t},\n\t\t\t\tset(this: any, value) {\n\t\t\t\t\tconst state = this[DRAFT_STATE]\n\t\t\t\t\tif (__DEV__) assertUnrevoked(state)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tobjectTraps.set(state, prop, value)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn desc\n\t}\n\n\t// This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\n\tfunction markChangesSweep(drafts: Drafted<any, ImmerState>[]) {\n\t\t// The natural order of drafts in the `scope` array is based on when they\n\t\t// were accessed. By processing drafts in reverse natural order, we have a\n\t\t// better chance of processing leaf nodes first. When a leaf node is known to\n\t\t// have changed, we can avoid any traversal of its ancestor nodes.\n\t\tfor (let i = drafts.length - 1; i >= 0; i--) {\n\t\t\tconst state: ES5State = drafts[i][DRAFT_STATE]\n\t\t\tif (!state.modified_) {\n\t\t\t\tswitch (state.type_) {\n\t\t\t\t\tcase ProxyType.ES5Array:\n\t\t\t\t\t\tif (hasArrayChanges(state)) markChanged(state)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase ProxyType.ES5Object:\n\t\t\t\t\t\tif (hasObjectChanges(state)) markChanged(state)\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction markChangesRecursively(object: any) {\n\t\tif (!object || typeof object !== \"object\") return\n\t\tconst state: ES5State | undefined = object[DRAFT_STATE]\n\t\tif (!state) return\n\t\tconst {base_, draft_, assigned_, type_} = state\n\t\tif (type_ === ProxyType.ES5Object) {\n\t\t\t// Look for added keys.\n\t\t\t// probably there is a faster way to detect changes, as sweep + recurse seems to do some\n\t\t\t// unnecessary work.\n\t\t\t// also: probably we can store the information we detect here, to speed up tree finalization!\n\t\t\teach(draft_, key => {\n\t\t\t\tif ((key as any) === DRAFT_STATE) return\n\t\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\t\tif ((base_ as any)[key] === undefined && !has(base_, key)) {\n\t\t\t\t\tassigned_[key] = true\n\t\t\t\t\tmarkChanged(state)\n\t\t\t\t} else if (!assigned_[key]) {\n\t\t\t\t\t// Only untouched properties trigger recursion.\n\t\t\t\t\tmarkChangesRecursively(draft_[key])\n\t\t\t\t}\n\t\t\t})\n\t\t\t// Look for removed keys.\n\t\t\teach(base_, key => {\n\t\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\t\tif (draft_[key] === undefined && !has(draft_, key)) {\n\t\t\t\t\tassigned_[key] = false\n\t\t\t\t\tmarkChanged(state)\n\t\t\t\t}\n\t\t\t})\n\t\t} else if (type_ === ProxyType.ES5Array) {\n\t\t\tif (hasArrayChanges(state as ES5ArrayState)) {\n\t\t\t\tmarkChanged(state)\n\t\t\t\tassigned_.length = true\n\t\t\t}\n\n\t\t\tif (draft_.length < base_.length) {\n\t\t\t\tfor (let i = draft_.length; i < base_.length; i++) assigned_[i] = false\n\t\t\t} else {\n\t\t\t\tfor (let i = base_.length; i < draft_.length; i++) assigned_[i] = true\n\t\t\t}\n\n\t\t\t// Minimum count is enough, the other parts has been processed.\n\t\t\tconst min = Math.min(draft_.length, base_.length)\n\n\t\t\tfor (let i = 0; i < min; i++) {\n\t\t\t\t// Only untouched indices trigger recursion.\n\t\t\t\tif (!draft_.hasOwnProperty(i)) {\n\t\t\t\t\tassigned_[i] = true\n\t\t\t\t}\n\t\t\t\tif (assigned_[i] === undefined) markChangesRecursively(draft_[i])\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction hasObjectChanges(state: ES5ObjectState) {\n\t\tconst {base_, draft_} = state\n\n\t\t// Search for added keys and changed keys. Start at the back, because\n\t\t// non-numeric keys are ordered by time of definition on the object.\n\t\tconst keys = ownKeys(draft_)\n\t\tfor (let i = keys.length - 1; i >= 0; i--) {\n\t\t\tconst key: any = keys[i]\n\t\t\tif (key === DRAFT_STATE) continue\n\t\t\tconst baseValue = base_[key]\n\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\tif (baseValue === undefined && !has(base_, key)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\t// Once a base key is deleted, future changes go undetected, because its\n\t\t\t// descriptor is erased. This branch detects any missed changes.\n\t\t\telse {\n\t\t\t\tconst value = draft_[key]\n\t\t\t\tconst state: ImmerState = value && value[DRAFT_STATE]\n\t\t\t\tif (state ? state.base_ !== baseValue : !is(value, baseValue)) {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// At this point, no keys were added or changed.\n\t\t// Compare key count to determine if keys were deleted.\n\t\tconst baseIsDraft = !!base_[DRAFT_STATE as any]\n\t\treturn keys.length !== ownKeys(base_).length + (baseIsDraft ? 0 : 1) // + 1 to correct for DRAFT_STATE\n\t}\n\n\tfunction hasArrayChanges(state: ES5ArrayState) {\n\t\tconst {draft_} = state\n\t\tif (draft_.length !== state.base_.length) return true\n\t\t// See #116\n\t\t// If we first shorten the length, our array interceptors will be removed.\n\t\t// If after that new items are added, result in the same original length,\n\t\t// those last items will have no intercepting property.\n\t\t// So if there is no own descriptor on the last position, we know that items were removed and added\n\t\t// N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n\t\t// the last one\n\t\t// last descriptor can be not a trap, if the array was extended\n\t\tconst descriptor = Object.getOwnPropertyDescriptor(\n\t\t\tdraft_,\n\t\t\tdraft_.length - 1\n\t\t)\n\t\t// descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n\t\tif (descriptor && !descriptor.get) return true\n\t\t// if we miss a property, it has been deleted, so array probobaly changed\n\t\tfor (let i = 0; i < draft_.length; i++) {\n\t\t\tif (!draft_.hasOwnProperty(i)) return true\n\t\t}\n\t\t// For all other cases, we don't have to compare, as they would have been picked up by the index setters\n\t\treturn false\n\t}\n\n\tfunction hasChanges_(state: ES5State) {\n\t\treturn state.type_ === ProxyType.ES5Object\n\t\t\t? hasObjectChanges(state)\n\t\t\t: hasArrayChanges(state)\n\t}\n\n\tfunction assertUnrevoked(state: any /*ES5State | MapState | SetState*/) {\n\t\tif (state.revoked_) die(3, JSON.stringify(latest(state)))\n\t}\n\n\tloadPlugin(\"ES5\", {\n\t\tcreateES5Proxy_,\n\t\twillFinalizeES5_,\n\t\thasChanges_\n\t})\n}\n", "import {immerable} from \"../immer\"\nimport {\n\tImmerState,\n\tPatch,\n\tSetState,\n\tES5ArrayState,\n\tProxyArrayState,\n\tMapState,\n\tES5ObjectState,\n\tProxyObjectState,\n\tPatchPath,\n\tget,\n\teach,\n\thas,\n\tgetArchtype,\n\tisSet,\n\tisMap,\n\tloadPlugin,\n\tProxyType,\n\tArchtype,\n\tdie,\n\tisDraft,\n\tisDraftable,\n\tNOTHING\n} from \"../internal\"\n\nexport function enablePatches() {\n\tconst REPLACE = \"replace\"\n\tconst ADD = \"add\"\n\tconst REMOVE = \"remove\"\n\n\tfunction generatePatches_(\n\t\tstate: ImmerState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tswitch (state.type_) {\n\t\t\tcase ProxyType.ProxyObject:\n\t\t\tcase ProxyType.ES5Object:\n\t\t\tcase ProxyType.Map:\n\t\t\t\treturn generatePatchesFromAssigned(\n\t\t\t\t\tstate,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t\tcase ProxyType.ES5Array:\n\t\t\tcase ProxyType.ProxyArray:\n\t\t\t\treturn generateArrayPatches(state, basePath, patches, inversePatches)\n\t\t\tcase ProxyType.Set:\n\t\t\t\treturn generateSetPatches(\n\t\t\t\t\t(state as any) as SetState,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t}\n\t}\n\n\tfunction generateArrayPatches(\n\t\tstate: ES5ArrayState | ProxyArrayState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, assigned_} = state\n\t\tlet copy_ = state.copy_!\n\n\t\t// Reduce complexity by ensuring `base` is never longer.\n\t\tif (copy_.length < base_.length) {\n\t\t\t// @ts-ignore\n\t\t\t;[base_, copy_] = [copy_, base_]\n\t\t\t;[patches, inversePatches] = [inversePatches, patches]\n\t\t}\n\n\t\t// Process replaced indices.\n\t\tfor (let i = 0; i < base_.length; i++) {\n\t\t\tif (assigned_[i] && copy_[i] !== base_[i]) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t\t})\n\t\t\t\tinversePatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(base_[i])\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\t// Process added indices.\n\t\tfor (let i = base_.length; i < copy_.length; i++) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tpatches.push({\n\t\t\t\top: ADD,\n\t\t\t\tpath,\n\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t})\n\t\t}\n\t\tif (base_.length < copy_.length) {\n\t\t\tinversePatches.push({\n\t\t\t\top: REPLACE,\n\t\t\t\tpath: basePath.concat([\"length\"]),\n\t\t\t\tvalue: base_.length\n\t\t\t})\n\t\t}\n\t}\n\n\t// This is used for both Map objects and normal objects.\n\tfunction generatePatchesFromAssigned(\n\t\tstate: MapState | ES5ObjectState | ProxyObjectState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tconst {base_, copy_} = state\n\t\teach(state.assigned_!, (key, assignedValue) => {\n\t\t\tconst origValue = get(base_, key)\n\t\t\tconst value = get(copy_!, key)\n\t\t\tconst op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD\n\t\t\tif (origValue === value && op === REPLACE) return\n\t\t\tconst path = basePath.concat(key as any)\n\t\t\tpatches.push(op === REMOVE ? {op, path} : {op, path, value})\n\t\t\tinversePatches.push(\n\t\t\t\top === ADD\n\t\t\t\t\t? {op: REMOVE, path}\n\t\t\t\t\t: op === REMOVE\n\t\t\t\t\t? {op: ADD, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t\t\t: {op: REPLACE, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t)\n\t\t})\n\t}\n\n\tfunction generateSetPatches(\n\t\tstate: SetState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, copy_} = state\n\n\t\tlet i = 0\n\t\tbase_.forEach((value: any) => {\n\t\t\tif (!copy_!.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t\ti = 0\n\t\tcopy_!.forEach((value: any) => {\n\t\t\tif (!base_.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t}\n\n\tfunction generateReplacementPatches_(\n\t\tbaseValue: any,\n\t\treplacement: any,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tpatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: replacement === NOTHING ? undefined : replacement\n\t\t})\n\t\tinversePatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: baseValue\n\t\t})\n\t}\n\n\tfunction applyPatches_<T>(draft: T, patches: Patch[]): T {\n\t\tpatches.forEach(patch => {\n\t\t\tconst {path, op} = patch\n\n\t\t\tlet base: any = draft\n\t\t\tfor (let i = 0; i < path.length - 1; i++) {\n\t\t\t\tconst parentType = getArchtype(base)\n\t\t\t\tlet p = path[i]\n\t\t\t\tif (typeof p !== \"string\" && typeof p !== \"number\") {\n\t\t\t\t\tp = \"\" + p\n\t\t\t\t}\n\n\t\t\t\t// See #738, avoid prototype pollution\n\t\t\t\tif (\n\t\t\t\t\t(parentType === Archtype.Object || parentType === Archtype.Array) &&\n\t\t\t\t\t(p === \"__proto__\" || p === \"constructor\")\n\t\t\t\t)\n\t\t\t\t\tdie(24)\n\t\t\t\tif (typeof base === \"function\" && p === \"prototype\") die(24)\n\t\t\t\tbase = get(base, p)\n\t\t\t\tif (typeof base !== \"object\") die(15, path.join(\"/\"))\n\t\t\t}\n\n\t\t\tconst type = getArchtype(base)\n\t\t\tconst value = deepClonePatchValue(patch.value) // used to clone patch to ensure original patch is not modified, see #411\n\t\t\tconst key = path[path.length - 1]\n\t\t\tswitch (op) {\n\t\t\t\tcase REPLACE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase Archtype.Map:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\t\tcase Archtype.Set:\n\t\t\t\t\t\t\tdie(16)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// if value is an object, then it's assigned by reference\n\t\t\t\t\t\t\t// in the following add or remove ops, the value field inside the patch will also be modifyed\n\t\t\t\t\t\t\t// so we use value from the cloned patch\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase ADD:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase Archtype.Array:\n\t\t\t\t\t\t\treturn key === \"-\"\n\t\t\t\t\t\t\t\t? base.push(value)\n\t\t\t\t\t\t\t\t: base.splice(key as any, 0, value)\n\t\t\t\t\t\tcase Archtype.Map:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\tcase Archtype.Set:\n\t\t\t\t\t\t\treturn base.add(value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase REMOVE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase Archtype.Array:\n\t\t\t\t\t\t\treturn base.splice(key as any, 1)\n\t\t\t\t\t\tcase Archtype.Map:\n\t\t\t\t\t\t\treturn base.delete(key)\n\t\t\t\t\t\tcase Archtype.Set:\n\t\t\t\t\t\t\treturn base.delete(patch.value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn delete base[key]\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tdie(17, op)\n\t\t\t}\n\t\t})\n\n\t\treturn draft\n\t}\n\n\t// optimize: this is quite a performance hit, can we detect intelligently when it is needed?\n\t// E.g. auto-draft when new objects from outside are assigned and modified?\n\t// (See failing test when deepClone just returns obj)\n\tfunction deepClonePatchValue<T>(obj: T): T\n\tfunction deepClonePatchValue(obj: any) {\n\t\tif (!isDraftable(obj)) return obj\n\t\tif (Array.isArray(obj)) return obj.map(deepClonePatchValue)\n\t\tif (isMap(obj))\n\t\t\treturn new Map(\n\t\t\t\tArray.from(obj.entries()).map(([k, v]) => [k, deepClonePatchValue(v)])\n\t\t\t)\n\t\tif (isSet(obj)) return new Set(Array.from(obj).map(deepClonePatchValue))\n\t\tconst cloned = Object.create(Object.getPrototypeOf(obj))\n\t\tfor (const key in obj) cloned[key] = deepClonePatchValue(obj[key])\n\t\tif (has(obj, immerable)) cloned[immerable] = obj[immerable]\n\t\treturn cloned\n\t}\n\n\tfunction clonePatchValueIfNeeded<T>(obj: T): T {\n\t\tif (isDraft(obj)) {\n\t\t\treturn deepClonePatchValue(obj)\n\t\t} else return obj\n\t}\n\n\tloadPlugin(\"Patches\", {\n\t\tapplyPatches_,\n\t\tgeneratePatches_,\n\t\tgenerateReplacementPatches_\n\t})\n}\n", "// types only!\nimport {\n\tImmerState,\n\tAnyMap,\n\tAnySet,\n\tMapState,\n\tSetState,\n\tDRAFT_STATE,\n\tgetCurrentScope,\n\tlatest,\n\titeratorSymbol,\n\tisDraftable,\n\tcreateProxy,\n\tloadPlugin,\n\tmarkChanged,\n\tProxyType,\n\tdie,\n\teach\n} from \"../internal\"\n\nexport function enableMapSet() {\n\t/* istanbul ignore next */\n\tvar extendStatics = function(d: any, b: any): any {\n\t\textendStatics =\n\t\t\tObject.setPrototypeOf ||\n\t\t\t({__proto__: []} instanceof Array &&\n\t\t\t\tfunction(d, b) {\n\t\t\t\t\td.__proto__ = b\n\t\t\t\t}) ||\n\t\t\tfunction(d, b) {\n\t\t\t\tfor (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]\n\t\t\t}\n\t\treturn extendStatics(d, b)\n\t}\n\n\t// Ugly hack to resolve #502 and inherit built in Map / Set\n\tfunction __extends(d: any, b: any): any {\n\t\textendStatics(d, b)\n\t\tfunction __(this: any): any {\n\t\t\tthis.constructor = d\n\t\t}\n\t\td.prototype =\n\t\t\t// @ts-ignore\n\t\t\t((__.prototype = b.prototype), new __())\n\t}\n\n\tconst DraftMap = (function(_super) {\n\t\t__extends(DraftMap, _super)\n\t\t// Create class manually, cause #502\n\t\tfunction DraftMap(this: any, target: AnyMap, parent?: ImmerState): any {\n\t\t\tthis[DRAFT_STATE] = {\n\t\t\t\ttype_: ProxyType.Map,\n\t\t\t\tparent_: parent,\n\t\t\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t\t\tmodified_: false,\n\t\t\t\tfinalized_: false,\n\t\t\t\tcopy_: undefined,\n\t\t\t\tassigned_: undefined,\n\t\t\t\tbase_: target,\n\t\t\t\tdraft_: this as any,\n\t\t\t\tisManual_: false,\n\t\t\t\trevoked_: false\n\t\t\t} as MapState\n\t\t\treturn this\n\t\t}\n\t\tconst p = DraftMap.prototype\n\n\t\tObject.defineProperty(p, \"size\", {\n\t\t\tget: function() {\n\t\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t\t}\n\t\t\t// enumerable: false,\n\t\t\t// configurable: true\n\t\t})\n\n\t\tp.has = function(key: any): boolean {\n\t\t\treturn latest(this[DRAFT_STATE]).has(key)\n\t\t}\n\n\t\tp.set = function(key: any, value: any) {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (!latest(state).has(key) || latest(state).get(key) !== value) {\n\t\t\t\tprepareMapCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.assigned_!.set(key, true)\n\t\t\t\tstate.copy_!.set(key, value)\n\t\t\t\tstate.assigned_!.set(key, true)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tp.delete = function(key: any): boolean {\n\t\t\tif (!this.has(key)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareMapCopy(state)\n\t\t\tmarkChanged(state)\n\t\t\tif (state.base_.has(key)) {\n\t\t\t\tstate.assigned_!.set(key, false)\n\t\t\t} else {\n\t\t\t\tstate.assigned_!.delete(key)\n\t\t\t}\n\t\t\tstate.copy_!.delete(key)\n\t\t\treturn true\n\t\t}\n\n\t\tp.clear = function() {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (latest(state).size) {\n\t\t\t\tprepareMapCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.assigned_ = new Map()\n\t\t\t\teach(state.base_, key => {\n\t\t\t\t\tstate.assigned_!.set(key, false)\n\t\t\t\t})\n\t\t\t\tstate.copy_!.clear()\n\t\t\t}\n\t\t}\n\n\t\tp.forEach = function(\n\t\t\tcb: (value: any, key: any, self: any) => void,\n\t\t\tthisArg?: any\n\t\t) {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tlatest(state).forEach((_value: any, key: any, _map: any) => {\n\t\t\t\tcb.call(thisArg, this.get(key), key, this)\n\t\t\t})\n\t\t}\n\n\t\tp.get = function(key: any): any {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tconst value = latest(state).get(key)\n\t\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\t\treturn value\n\t\t\t}\n\t\t\tif (value !== state.base_.get(key)) {\n\t\t\t\treturn value // either already drafted or reassigned\n\t\t\t}\n\t\t\t// despite what it looks, this creates a draft only once, see above condition\n\t\t\tconst draft = createProxy(state.scope_.immer_, value, state)\n\t\t\tprepareMapCopy(state)\n\t\t\tstate.copy_!.set(key, draft)\n\t\t\treturn draft\n\t\t}\n\n\t\tp.keys = function(): IterableIterator<any> {\n\t\t\treturn latest(this[DRAFT_STATE]).keys()\n\t\t}\n\n\t\tp.values = function(): IterableIterator<any> {\n\t\t\tconst iterator = this.keys()\n\t\t\treturn {\n\t\t\t\t[iteratorSymbol]: () => this.values(),\n\t\t\t\tnext: () => {\n\t\t\t\t\tconst r = iterator.next()\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tif (r.done) return r\n\t\t\t\t\tconst value = this.get(r.value)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as any\n\t\t}\n\n\t\tp.entries = function(): IterableIterator<[any, any]> {\n\t\t\tconst iterator = this.keys()\n\t\t\treturn {\n\t\t\t\t[iteratorSymbol]: () => this.entries(),\n\t\t\t\tnext: () => {\n\t\t\t\t\tconst r = iterator.next()\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tif (r.done) return r\n\t\t\t\t\tconst value = this.get(r.value)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: [r.value, value]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as any\n\t\t}\n\n\t\tp[iteratorSymbol] = function() {\n\t\t\treturn this.entries()\n\t\t}\n\n\t\treturn DraftMap\n\t})(Map)\n\n\tfunction proxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T {\n\t\t// @ts-ignore\n\t\treturn new DraftMap(target, parent)\n\t}\n\n\tfunction prepareMapCopy(state: MapState) {\n\t\tif (!state.copy_) {\n\t\t\tstate.assigned_ = new Map()\n\t\t\tstate.copy_ = new Map(state.base_)\n\t\t}\n\t}\n\n\tconst DraftSet = (function(_super) {\n\t\t__extends(DraftSet, _super)\n\t\t// Create class manually, cause #502\n\t\tfunction DraftSet(this: any, target: AnySet, parent?: ImmerState) {\n\t\t\tthis[DRAFT_STATE] = {\n\t\t\t\ttype_: ProxyType.Set,\n\t\t\t\tparent_: parent,\n\t\t\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t\t\tmodified_: false,\n\t\t\t\tfinalized_: false,\n\t\t\t\tcopy_: undefined,\n\t\t\t\tbase_: target,\n\t\t\t\tdraft_: this,\n\t\t\t\tdrafts_: new Map(),\n\t\t\t\trevoked_: false,\n\t\t\t\tisManual_: false\n\t\t\t} as SetState\n\t\t\treturn this\n\t\t}\n\t\tconst p = DraftSet.prototype\n\n\t\tObject.defineProperty(p, \"size\", {\n\t\t\tget: function() {\n\t\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t\t}\n\t\t\t// enumerable: true,\n\t\t})\n\n\t\tp.has = function(value: any): boolean {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\t// bit of trickery here, to be able to recognize both the value, and the draft of its value\n\t\t\tif (!state.copy_) {\n\t\t\t\treturn state.base_.has(value)\n\t\t\t}\n\t\t\tif (state.copy_.has(value)) return true\n\t\t\tif (state.drafts_.has(value) && state.copy_.has(state.drafts_.get(value)))\n\t\t\t\treturn true\n\t\t\treturn false\n\t\t}\n\n\t\tp.add = function(value: any): any {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (!this.has(value)) {\n\t\t\t\tprepareSetCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.copy_!.add(value)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tp.delete = function(value: any): any {\n\t\t\tif (!this.has(value)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\tmarkChanged(state)\n\t\t\treturn (\n\t\t\t\tstate.copy_!.delete(value) ||\n\t\t\t\t(state.drafts_.has(value)\n\t\t\t\t\t? state.copy_!.delete(state.drafts_.get(value))\n\t\t\t\t\t: /* istanbul ignore next */ false)\n\t\t\t)\n\t\t}\n\n\t\tp.clear = function() {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (latest(state).size) {\n\t\t\t\tprepareSetCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.copy_!.clear()\n\t\t\t}\n\t\t}\n\n\t\tp.values = function(): IterableIterator<any> {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\treturn state.copy_!.values()\n\t\t}\n\n\t\tp.entries = function entries(): IterableIterator<[any, any]> {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\treturn state.copy_!.entries()\n\t\t}\n\n\t\tp.keys = function(): IterableIterator<any> {\n\t\t\treturn this.values()\n\t\t}\n\n\t\tp[iteratorSymbol] = function() {\n\t\t\treturn this.values()\n\t\t}\n\n\t\tp.forEach = function forEach(cb: any, thisArg?: any) {\n\t\t\tconst iterator = this.values()\n\t\t\tlet result = iterator.next()\n\t\t\twhile (!result.done) {\n\t\t\t\tcb.call(thisArg, result.value, result.value, this)\n\t\t\t\tresult = iterator.next()\n\t\t\t}\n\t\t}\n\n\t\treturn DraftSet\n\t})(Set)\n\n\tfunction proxySet_<T extends AnySet>(target: T, parent?: ImmerState): T {\n\t\t// @ts-ignore\n\t\treturn new DraftSet(target, parent)\n\t}\n\n\tfunction prepareSetCopy(state: SetState) {\n\t\tif (!state.copy_) {\n\t\t\t// create drafts for all entries to preserve insertion order\n\t\t\tstate.copy_ = new Set()\n\t\t\tstate.base_.forEach(value => {\n\t\t\t\tif (isDraftable(value)) {\n\t\t\t\t\tconst draft = createProxy(state.scope_.immer_, value, state)\n\t\t\t\t\tstate.drafts_.set(value, draft)\n\t\t\t\t\tstate.copy_!.add(draft)\n\t\t\t\t} else {\n\t\t\t\t\tstate.copy_!.add(value)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tfunction assertUnrevoked(state: any /*ES5State | MapState | SetState*/) {\n\t\tif (state.revoked_) die(3, JSON.stringify(latest(state)))\n\t}\n\n\tloadPlugin(\"MapSet\", {proxyMap_, proxySet_})\n}\n", "import {enableES5} from \"./es5\"\nimport {enableMapSet} from \"./mapset\"\nimport {enablePatches} from \"./patches\"\n\nexport function enableAllPlugins() {\n\tenableES5()\n\tenableMapSet()\n\tenablePatches()\n}\n", "import {\n\tIProduce,\n\tIProduceWithPatches,\n\tImmer,\n\tDraft,\n\tImmutable\n} from \"./internal\"\n\nexport {\n\tDraft,\n\tImmutable,\n\tPatch,\n\tPatchListener,\n\toriginal,\n\tcurrent,\n\tisDraft,\n\tisDraftable,\n\tNOTHING as nothing,\n\tDRAFTABLE as immerable,\n\tfreeze\n} from \"./internal\"\n\nconst immer = new Immer()\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport const produce: IProduce = immer.produce\nexport default produce\n\n/**\n * Like `produce`, but `produceWithPatches` always returns a tuple\n * [nextState, patches, inversePatches] (instead of just the next state)\n */\nexport const produceWithPatches: IProduceWithPatches = immer.produceWithPatches.bind(\n\timmer\n)\n\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * Always freeze by default, even in production mode\n */\nexport const setAutoFreeze = immer.setAutoFreeze.bind(immer)\n\n/**\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n * always faster than using ES5 proxies.\n *\n * By default, feature detection is used, so calling this is rarely necessary.\n */\nexport const setUseProxies = immer.setUseProxies.bind(immer)\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nexport const applyPatches = immer.applyPatches.bind(immer)\n\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\nexport const createDraft = immer.createDraft.bind(immer)\n\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\nexport const finishDraft = immer.finishDraft.bind(immer)\n\n/**\n * This function is actually a no-op, but can be used to cast an immutable type\n * to an draft type and make TypeScript happy\n *\n * @param value\n */\nexport function castDraft<T>(value: T): Draft<T> {\n\treturn value as any\n}\n\n/**\n * This function is actually a no-op, but can be used to cast a mutable type\n * to an immutable type and make TypeScript happy\n * @param value\n */\nexport function castImmutable<T>(value: T): Immutable<T> {\n\treturn value as any\n}\n\nexport {Immer}\n\nexport {enableES5} from \"./plugins/es5\"\nexport {enablePatches} from \"./plugins/patches\"\nexport {enableMapSet} from \"./plugins/mapset\"\nexport {enableAllPlugins} from \"./plugins/all\"\n", "// Should be no imports here!\n\n// Some things that should be evaluated before all else...\n\n// We only want to know if non-polyfilled symbols are available\nconst hasSymbol =\n\ttypeof Symbol !== \"undefined\" && typeof Symbol(\"x\") === \"symbol\"\nexport const hasMap = typeof Map !== \"undefined\"\nexport const hasSet = typeof Set !== \"undefined\"\nexport const hasProxies =\n\ttypeof Proxy !== \"undefined\" &&\n\ttypeof Proxy.revocable !== \"undefined\" &&\n\ttypeof Reflect !== \"undefined\"\n\n/**\n * The sentinel value returned by producers to replace the draft with undefined.\n */\nexport const NOTHING: Nothing = hasSymbol\n\t? Symbol.for(\"immer-nothing\")\n\t: ({[\"immer-nothing\"]: true} as any)\n\n/**\n * To let Immer treat your class instances as plain immutable objects\n * (albeit with a custom prototype), you must define either an instance property\n * or a static property on each of your custom classes.\n *\n * Otherwise, your class instance will never be drafted, which means it won't be\n * safe to mutate in a produce callback.\n */\nexport const DRAFTABLE: unique symbol = hasSymbol\n\t? Symbol.for(\"immer-draftable\")\n\t: (\"__$immer_draftable\" as any)\n\nexport const DRAFT_STATE: unique symbol = hasSymbol\n\t? Symbol.for(\"immer-state\")\n\t: (\"__$immer_state\" as any)\n\n// Even a polyfilled Symbol might provide Symbol.iterator\nexport const iteratorSymbol: typeof Symbol.iterator =\n\t(typeof Symbol != \"undefined\" && Symbol.iterator) || (\"@@iterator\" as any)\n\n/** Use a class type for `nothing` so its type is unique */\nexport class Nothing {\n\t// This lets us do `Exclude<T, Nothing>`\n\t// @ts-ignore\n\tprivate _!: unique symbol\n}\n"],
  "mappings": "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",
  "names": ["die", "error", "args", "e", "errors", "msg", "apply", "Error", "length", "map", "s", "join", "isDraft", "value", "DRAFT_STATE", "isDraftable", "proto", "Object", "getPrototypeOf", "Ctor", "hasOwnProperty", "call", "constructor", "Function", "toString", "objectCtorString", "Array", "isArray", "DRAFTABLE", "_value$constructor", "isMap", "isSet", "original", "base_", "each", "obj", "iter", "enumerableOnly", "getArchtype", "keys", "ownKeys", "forEach", "key", "entry", "index", "thing", "state", "type_", "has", "prop", "prototype", "get", "set", "propOrOldValue", "t", "add", "is", "x", "y", "target", "hasMap", "Map", "hasSet", "Set", "latest", "copy_", "shallowCopy", "base", "slice", "descriptors", "getOwnPropertyDescriptors", "i", "desc", "writable", "configurable", "enumerable", "create", "freeze", "deep", "isFrozen", "clear", "delete", "dontMutateFrozenCollections", "getPlugin", "pluginKey", "plugin", "plugins", "loadPlugin", "implementation", "getCurrentScope", "currentScope", "usePatchesInScope", "scope", "patchListener", "patches_", "inversePatches_", "patchListener_", "revokeScope", "leaveScope", "drafts_", "revokeDraft", "parent_", "enterScope", "immer", "immer_", "canAutoFreeze_", "unfinalizedDrafts_", "draft", "revoke_", "revoked_", "processResult", "result", "baseDraft", "isReplaced", "useProxies_", "willFinalizeES5_", "modified_", "finalize", "maybeFreeze", "generateReplacementPatches_", "NOTHING", "undefined", "rootScope", "path", "childValue", "finalizeProperty", "scope_", "finalized_", "draft_", "resultEach", "generatePatches_", "parentState", "targetObject", "rootPath", "targetIsSet", "res", "assigned_", "concat", "autoFreeze_", "peek", "getDescriptorFromProto", "source", "getOwnPropertyDescriptor", "markChanged", "prepareCopy", "createProxy", "parent", "proxyMap_", "proxySet_", "isManual_", "traps", "objectTraps", "arrayTraps", "Proxy", "revocable", "revoke", "proxy", "createES5Proxy_", "push", "current", "currentImpl", "copy", "archType", "hasChanges_", "copyHelper", "from", "enableES5", "proxyProperty", "this", "assertUnrevoked", "markChangesSweep", "drafts", "hasArrayChanges", "hasObjectChanges", "baseValue", "baseIsDraft", "descriptor", "JSON", "stringify", "defineProperty", "markChangesRecursively", "object", "min", "Math", "enablePatches", "deepClonePatchValue", "entries", "n", "cloned", "immerable", "clonePatchValueIfNeeded", "ADD", "applyPatches_", "patches", "patch", "op", "parentType", "p", "type", "splice", "basePath", "inversePatches", "assignedValue", "origValue", "a", "unshift", "replacement", "enableMapSet", "__extends", "d", "b", "__", "extendStatics", "prepareMapCopy", "prepareSetCopy", "setPrototypeOf", "__proto__", "DraftMap", "size", "cb", "thisArg", "_value", "_this", "values", "r", "iterator", "iteratorSymbol", "_this2", "next", "done", "_this3", "DraftSet", "enableAllPlugins", "castDraft", "castImmutable", "hasSymbol", "Symbol", "hasProxies", "Reflect", "for", "data", "getOwnPropertySymbols", "getOwnPropertyNames", "_desc$get", "currentState", "Number", "isNaN", "deleteProperty", "owner", "fn", "arguments", "parseInt", "Immer", "config", "recipe", "defaultBase", "self", "produce", "hasError", "Promise", "then", "ip", "produceWithPatches", "nextState", "useProxies", "setUseProxies", "autoFreeze", "setAutoFreeze", "createDraft", "finishDraft", "applyPatches", "applyPatchesImpl", "bind"]
}
